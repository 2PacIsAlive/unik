FROM projectunik/compilers-rump-base-xen

ENV GOROOT=/usr/local/go
ENV GOPATH=$HOME/go
ENV PATH=$PATH:$GOROOT/bin:$GOPATH/bin

RUN curl https://storage.googleapis.com/golang/go1.5.2.linux-amd64.tar.gz | tar xz -C /usr/local && \
    mv /usr/local/go /usr/local/go1.5 && ln -s /usr/local/go1.5 /usr/local/go && \
    cd /tmp && git clone https://github.com/deferpanic/gorump

COPY fixgo.sh /tmp/

RUN cd /tmp/gorump/go/src && \
    bash /tmp/fixgo.sh && \
    GOROOT_BOOTSTRAP=/usr/local/go GOOS=rumprun GOARCH=amd64 ./make.bash && \
    cd /tmp && mv gorump/go /usr/local/go1.5-patched && \
    rm /usr/local/go  && \
    ln -s /usr/local/go1.5-patched /usr/local/go

RUN mkdir /tmp/build/
RUN go get github.com/tools/godep

COPY gomaincaller.go /tmp/build/
COPY genstub $GOPATH/bin/

ENV RUMP_BAKE=xen_pv

# RUN LIKE THIS: docker run --rm -v /path/to/code:/opt/code -e APP_ARGS="-flag1 val1" -e "" projectunik/compilers-rump-go-xen
CMD set -x && \
    cp /tmp/build/gomaincaller.go . && \
    genstub -o ./mainstub.c -args "${APP_ARGS}" && \
    mkdir -p ${GOPATH}/src/${ROOT_PATH} && \
    cp -r ./* ${GOPATH}/src/${ROOT_PATH} && \
    cd ${GOPATH}/src/${ROOT_PATH} && \
    ((if [ -d Godeps ]; then GO15VENDOREXPERIMENT=1 godep restore; fi) || true ) && \
    CC=x86_64-rumprun-netbsd-gcc CGO_ENABLED=1 GOOS=rumprun /usr/local/go/bin/go build -buildmode=c-archive -v -a -x  *.go && \
    RUMPRUN_STUBLINK=succeed x86_64-rumprun-netbsd-gcc -g -o program mainstub.c $(find . -name "*.a") && \
    rm -f /opt/code/mainstub.c /opt/code/gomaincaller.go && \
    rumprun-bake $RUMP_BAKE /opt/code/program.bin program
