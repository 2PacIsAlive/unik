// Code generated by go-bindata.
// sources:
// containers/versions.json
// DO NOT EDIT!

package versiondata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _containersVersionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\x5d\xae\xdb\x20\x10\x85\xdf\xb3\x8a\xc8\xcf\xb5\x04\x0c\x30\xd0\xdd\x0c\x30\x24\xb9\x8a\x4d\xea\x9f\xdc\x56\x55\xf7\x5e\x88\x53\x29\xaa\x92\xdc\x17\xcb\xb2\xbe\x8f\x19\x1f\xce\xef\xdd\x7e\xdf\x5d\xe7\xcb\x91\x27\xee\xe3\xf9\xc4\xe3\xd2\x7d\xdf\x77\x8c\x11\x82\xb4\x89\xd0\xd5\x57\xa2\xee\x5b\xe3\x4e\x03\x1d\x2a\x35\x31\x2d\x65\x6a\x98\x09\xd6\x18\x9b\xa5\x8c\x22\xa3\x89\xb8\x61\xa1\x94\xe5\x91\xca\x9a\x15\x09\x2f\xa2\xd7\x5e\x29\x4c\x1b\xf5\x83\x87\xb5\x5f\x97\xd3\xb9\x21\x84\x90\x63\x40\x2f\x0c\x09\x63\x8c\xda\x90\x58\x86\xcb\xe9\xcc\xd3\xdc\x97\xf9\xda\x7f\xd0\x95\x6e\x2c\x49\x12\x5a\x81\x35\x04\x56\x20\xfd\xcf\x4e\xeb\x70\xe9\x0f\xa5\xff\xc9\x63\xc3\xb1\x6e\x87\x92\x63\x42\x8a\x42\x2a\xfd\x0a\x3f\x7e\x36\x3a\xc5\xa8\x14\x81\x8e\x94\x5c\x94\xea\xe5\xe1\xc7\xcf\x7e\x2c\xfd\xbc\xac\xa1\x59\xc1\x32\x6a\xcc\x75\x80\x0e\x6c\x5f\x58\x63\x49\xfc\x31\xdf\xe7\x44\x02\x9f\x75\x34\xa9\x3e\x49\x53\x7e\x6f\x3c\xce\x72\xd9\x91\x75\x3a\x03\x39\x9b\x9c\xb5\xef\xcc\x7b\x04\x00\x94\x82\x53\xa0\xbc\x73\x49\x69\xff\x54\xb9\xfc\x5a\x8e\x65\x84\xfb\x7e\x0e\x49\x32\x02\x58\xd2\xd2\x64\xe1\xbe\x50\x1e\x17\x14\xde\x61\x36\x35\x0a\xe1\x6b\x73\x08\xdf\xaa\xf7\x0d\x7d\x0a\x12\x94\xe2\xe4\xb9\xa6\xae\xc5\x53\x27\xd0\xcc\xff\x04\x49\x6c\x1c\x41\x80\xc0\x1e\x94\x7b\x9e\xdf\x4d\xd8\xfe\x07\x21\x45\x99\x73\x52\xd6\xaa\x14\x0c\x6f\xfc\x8d\x4a\x1c\xd6\xc3\x81\xa7\xbe\x35\xb2\xb1\xda\x67\x89\xde\xd6\x3a\x66\x6d\x95\x80\xd7\x67\xd7\x6f\x43\xd9\x22\x96\xed\x56\x9c\xaf\xd5\x4c\xe8\x4c\xee\x76\x7f\x76\x7f\x03\x00\x00\xff\xff\x5a\xc7\xa9\xdc\x5c\x03\x00\x00")

func containersVersionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_containersVersionsJson,
		"containers/versions.json",
	)
}

func containersVersionsJson() (*asset, error) {
	bytes, err := containersVersionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "containers/versions.json", size: 860, mode: os.FileMode(420), modTime: time.Unix(1466108136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"containers/versions.json": containersVersionsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"containers": &bintree{nil, map[string]*bintree{
		"versions.json": &bintree{containersVersionsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

