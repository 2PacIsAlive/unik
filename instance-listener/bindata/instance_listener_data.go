// Code generated by go-bindata.
// sources:
// instance-listener/main.go
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _instanceListenerMainGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5b\x73\xdb\xb8\x15\x7e\xb6\x7e\x05\x96\x33\x9b\x21\x13\x2d\xe5\xb6\x9e\x6d\xab\xac\x1f\xbc\xeb\x38\xab\x99\x38\x71\xed\x64\xf6\xc1\x4d\xbd\x30\x09\x59\x6c\x28\x80\x21\x40\x39\x9a\x54\xff\xbd\xdf\x39\xe0\x55\x97\x34\xd3\xdb\xac\x1f\x4c\x11\xe7\x82\x73\xc7\x07\x16\x32\xf9\x20\x1f\x94\x58\xca\x4c\x8f\x46\x93\xc9\xdb\x37\xe7\x6f\xa6\x78\xfb\xa0\x84\xad\x4a\x25\x9c\x11\x32\x7f\x94\x6b\x2b\xee\x33\x4d\xcc\xc2\x2d\x32\x2b\xe6\x59\xce\x34\x2c\xa6\xd2\xc9\x49\xa6\xad\x93\x3a\x51\x77\x79\x66\x9d\xd2\xaa\xbc\xa3\x65\x61\xb4\x28\x55\x62\x96\x05\xd8\xa1\x5c\xa6\xa9\x90\x5e\xb9\x93\xe5\x83\x72\xa3\x51\xb6\x2c\x4c\xe9\x44\x38\x3a\x0a\x94\x4e\x4c\x9a\xe9\x87\xc9\xdf\xad\xd1\x01\x2d\x94\xa5\x29\x2d\xfd\x9a\x2f\x1d\x3d\x32\x33\xc9\x4c\xe5\xb2\x9c\x5e\xb4\x72\xf5\x63\xb2\x70\xae\xa0\xdf\xd6\x95\x90\x67\x09\xbb\xd6\x09\x3d\x5d\xb6\x54\xf4\xcc\xcd\x43\x30\x8a\x46\xa3\xc4\xc0\x52\x01\x63\x9d\x62\x1f\x4e\x45\x30\x61\x0f\xda\xa5\xd8\x6f\x3f\x72\xeb\x42\x79\x46\xfc\x2f\xab\xc4\x89\xcf\xa3\xa3\x4b\x99\xcc\x8a\x4b\x59\x08\x78\x51\xdc\xfa\xfd\xde\xfb\x87\xe8\xfd\xfd\x4a\x3a\xa6\xc1\xac\xb0\xc1\xaf\x2c\xf4\x42\xaf\x48\xaa\x27\xb4\x2b\x5f\x0b\x81\x95\xa4\x36\xa3\xd1\xbc\xd2\x09\x27\x26\x8c\x68\xef\x8c\x36\x7e\x65\x90\x82\xe9\xa9\x20\xff\xe2\xeb\x5f\x2e\x2b\xa7\x3e\x7d\xde\x8c\x8e\x14\x6f\x70\x88\x6a\xe5\x4a\x0d\x68\x2d\x65\x25\x4b\x61\xbd\x9b\x60\x8b\x5b\xff\x4e\x39\x4d\xe1\x8e\x95\x51\xcd\x55\x3b\xb4\xcb\xb6\x47\x62\x74\x44\x11\x1e\x0b\xe4\x93\x0c\xf0\x29\x8c\xaf\x95\x4c\x2f\x10\xef\xb0\x8d\x3c\x74\x67\x73\xe6\xfa\xe6\x54\xe8\x2c\x27\xa7\x8f\x90\xb8\xf8\x0a\x7a\xdc\x3c\x0c\x12\x53\xe5\xa9\xd0\xc6\xa1\xaa\x64\xda\x65\x71\x0c\x2b\xd6\xf7\xca\x97\x26\x57\x67\x89\x24\xdf\x1b\xe3\xa6\x22\x78\x06\x85\xf1\x0b\x2a\xa5\x30\xc2\x0e\x1b\xa1\x72\xab\x58\x75\xbd\x19\x4c\xa2\xc8\xc7\xef\xf4\x52\x96\x76\x21\xf3\xd0\x9b\xfb\xc4\x46\xcf\xb7\xad\x19\x98\x33\x97\xd8\x3b\xa5\x36\x28\x20\xd8\x14\x0b\x67\x71\x67\xdb\x23\xc4\x1a\x29\x3d\x6a\xfa\x63\x56\xb4\xf1\x40\x1f\x20\x37\x32\x9f\x15\xe1\xc1\x08\x5c\xc0\xa2\x7c\xb0\x25\xa4\x44\x4e\x62\x22\x2b\xa6\xe2\xdb\x55\xc0\xfa\xa2\x7a\x97\x9e\x95\x37\x68\x35\x47\xf5\x55\xe9\xec\x83\x48\x33\x9b\x98\x95\x2a\xd7\x22\xac\xd2\x42\x2c\x14\x88\xf7\x4a\x22\x5a\xa5\x91\x69\x22\xad\x8b\xc4\x63\xe6\x16\xd0\x2a\xbe\xb5\x50\xda\x19\x1c\xdf\x70\x3e\xd9\x9d\x4c\xcf\x0d\xd9\x7e\xfb\xfe\x7e\xed\x54\x18\x90\xee\x69\x20\x9e\x1d\x60\xef\x56\x2f\xa5\xe5\x2a\xec\xf1\x9d\xab\xb9\xac\x72\x47\x14\x0a\xc0\x8f\xd7\x6f\xce\xce\x7f\x3a\xbb\x79\x7b\x37\xbb\x5a\x9d\x10\x6f\xa9\x60\xb0\x55\xcc\xd0\x8f\xdf\x50\xab\x8f\xdd\xd6\x4e\xa7\xfb\xc3\xd8\x70\x7d\xe7\x63\xf7\x5c\xf4\x16\xbe\x5b\x42\xd0\xaf\x76\xf5\x86\x38\x27\x55\x4e\xe9\x6d\xe3\x24\x30\xcd\x4a\x65\x87\x31\xda\x63\x14\xb5\x1f\x5a\x4f\xb9\x36\xe1\x18\x59\xf1\x79\x26\xf3\x77\xe7\x57\x88\x5c\x5a\x9c\x40\x05\xac\x44\xc5\x11\x05\xab\x67\xd0\x4c\x26\xcf\xae\xa6\x18\x26\xc3\x80\x8c\xb1\x7e\x85\x91\x39\x15\x7f\xfe\xd3\x1f\xbf\xc7\xdb\xe6\x5f\x15\x0d\x86\x67\x7c\x53\xd4\xd5\xd0\x9a\xdf\xba\xde\x95\x54\x0a\x9b\x04\x55\x45\xe7\x23\xc6\xa5\x56\x89\xcb\x30\x11\xc7\x5b\x86\x44\xde\xb7\x07\x23\x68\x4e\xf9\x11\x75\x34\x37\xa5\xef\x93\x3b\xef\x2d\xc6\x0d\xfb\x1e\xff\x52\x66\xa8\x13\x2a\x1b\x6a\x86\x3d\x06\x0f\x13\x74\xd0\xcc\x47\xe8\xa1\x62\xa6\xb3\xa7\xb5\x92\x6c\xf6\xfb\x6c\x35\xde\x8e\xcd\xb4\xd1\x66\xbb\x8f\x5b\x45\x50\x1c\xc7\x71\xc0\x5c\x74\x70\xc4\x37\xb9\x52\x45\xf8\xfb\xe3\xe3\x63\xf1\x54\xf0\xca\x65\x96\x23\xc3\x38\xd3\x74\xda\x74\x35\x15\xed\x92\xf2\x4a\xc7\x50\xfc\x5a\x3d\xde\xa8\x72\xa5\x2e\xab\x4f\x4c\x88\x7f\x96\x3a\xcd\xd5\x05\xc5\x28\x98\x94\xea\x81\xea\xa3\x44\x34\x39\x6a\x28\x20\x2f\x76\xad\x6c\x81\xa3\x49\x71\x9c\xca\x31\x6a\xfe\xa3\x78\x5a\x53\x3e\x56\x8a\xda\xb2\x1e\x59\xa0\xc4\x97\xca\x2d\x4c\x4a\xe1\x0b\xae\xde\xdc\xbc\x0d\x7c\x04\xa1\xcc\xc7\xf9\x67\x4c\x47\x55\x86\x2c\x8e\xf6\x77\x95\x7d\x6d\xdc\x85\xa9\xbc\xcd\xe0\x73\x55\xa9\xc9\x7a\x81\x7f\xb6\xc8\x33\x47\x15\xc7\x87\x83\x3f\x41\x51\x2f\x58\x0c\x69\xab\x6b\xb5\x34\x4e\x11\x7d\x2c\x82\x29\xc7\x86\xda\x4c\xe9\xb0\x15\x8c\xc4\x0f\xe2\x77\xbb\xe3\x71\x28\x4d\x59\x1c\xf7\x3a\xca\x8f\xcc\x92\xe9\xdc\x4a\x02\x52\x06\x63\x67\xc2\x80\x00\xa0\x01\xd8\x42\xd6\x95\x37\x54\xb5\xe5\x04\x59\x54\xc3\x8f\x59\xc1\x4e\x34\x86\xdd\x1e\xbf\x07\x71\x29\x93\x33\xdf\xaa\x7e\x98\x7c\x8c\xdf\x5d\xbf\x8a\xff\x52\x61\x08\x86\x51\xfc\x52\xb9\x30\x00\xcb\x5d\xd3\xce\xd1\xd6\xa1\x33\xab\x75\x8b\x26\x77\x2a\xdd\xe1\x69\x47\x70\x67\xc8\x41\x96\xce\x1c\x62\x99\x4c\xf0\xde\x8c\x12\xb4\x8b\x5b\xa8\x56\x89\xc8\x52\xfc\x16\x2b\x5b\x2c\xb0\xeb\x64\x75\x6f\x3e\x41\x62\xd8\x70\x1d\x2a\x88\xe9\x5f\xc8\xb1\x49\xd5\x5c\x21\x9e\x2d\xe5\x9d\xce\x5b\x5a\x77\xc6\xdf\x76\x96\xbc\xc7\xce\x9d\xe9\xc4\x86\x5d\x08\x34\x84\x76\x2c\x1a\xf0\xc0\xf5\xce\x4a\x3a\xb0\x11\x5f\xb7\xbb\xfa\x4d\xfb\xa4\xde\xb6\x58\x1e\x0b\xe3\xf1\x47\x07\x1f\xfa\x16\xf8\xba\xfa\x06\x3c\xec\x16\x04\xbe\x84\x41\x86\xb1\x85\x9a\xbd\xc1\x1d\x30\x41\x63\xcd\xd4\xb3\x60\x87\x4b\x1b\x72\x41\x58\x9c\xae\x34\xcb\x9a\xa0\x50\x09\x16\xf9\x9a\x26\x0f\x9f\x8e\x6a\x59\xb8\x35\xc1\xb9\xa0\x9e\x02\x43\x88\xc3\x78\xe2\xb2\x46\x13\xd0\x17\x8d\xf6\x8e\xbc\xfd\xd8\xa6\x46\x21\x6c\x07\x3a\xe2\x00\x9e\x18\x36\xc0\xb0\xef\x68\x94\xa4\xad\xad\x64\xd9\xd4\x1f\xe6\xf4\x93\x84\xe9\x48\xb8\xa8\x8f\x04\xb0\xa3\xb3\xfb\xe4\xcd\xee\xdc\x42\x3c\xee\x5a\x8c\x0f\xc3\x7e\x23\xf3\xeb\xdf\xeb\xee\x43\x68\xf4\x2c\xcf\x79\xe4\xfd\x68\xd2\xf5\x81\x8c\x7d\xc1\xc4\x99\x86\xe3\x5a\xe6\x3c\xfd\x4b\xce\x54\x34\x10\x09\x6b\xb0\xd4\x4f\xe4\xae\x3f\xbe\x8d\x1a\x33\xe2\x9f\x72\x63\x15\xb7\x10\x21\x75\x2a\x89\x9d\x76\xf8\x0a\x24\x4b\x25\xb8\x8b\x65\xff\xf7\xce\xf4\xcb\xf2\xc5\x9e\xb6\xda\x19\xa4\x87\x3a\x79\x7f\x23\xd7\x9d\xd5\x9b\x39\x87\xa7\x51\x6f\x18\x1d\x98\x40\x98\x37\xe0\x1f\x1d\x9c\x7d\x5f\x08\xd7\x59\x92\xa8\xc2\xa9\x74\x7f\xf3\x34\xde\xda\xff\x5e\xd7\xbc\x7c\xf1\x1f\x35\x4d\x77\x34\x6c\xcf\xef\x1e\xa5\x17\xb1\xc3\xc3\xad\x3b\x4e\xfe\x8f\x1d\xb3\xe9\x67\x23\xec\x4d\xad\x7e\x99\x78\x20\x4e\x53\xd0\x68\xc1\x98\xe2\x0f\xc0\x71\x54\x71\x6c\xc2\x2b\x26\x9f\xe9\x94\x77\x0f\x83\x29\x53\x51\x77\x51\x7b\xf5\xee\x5f\xcc\x44\x48\xd8\x7c\x76\xc5\x51\x80\x9d\x7c\x21\x9f\xcb\x84\x86\x67\x0f\xd6\xb3\x4b\xbc\xbc\xff\x2e\xe7\xb3\xe0\x59\xaf\x3e\x6f\x6a\x6d\x96\x50\x23\x0d\x6e\xf4\xb3\x5a\x91\xc9\x60\x78\x34\xe5\x07\xc2\x44\xb5\x3e\xba\x5c\x6d\xdd\x64\x47\x0c\xb7\x81\xb4\xd9\x10\x1e\x7f\x52\x3f\x28\xff\x6a\x77\x6e\xcf\x73\xaa\x05\x21\x75\xa7\x94\xda\xe8\xaf\x84\xaf\x58\x82\x22\x4b\x63\xb2\xf3\x88\x97\x63\xea\x0f\x76\x67\x5f\x7a\x01\x84\x01\x9b\x2b\x55\x67\xa5\x36\x48\xd6\x70\xd2\xdb\xc3\x4a\x77\x4f\x3c\xb4\x45\x41\x77\x0b\xb8\x5b\x4f\xe7\xba\xad\x65\x83\xf1\x2c\xce\xaf\x64\x21\x56\xa4\x8a\x16\xe3\x90\x3e\xca\xd4\xc0\x07\x80\x5d\x89\xa7\x3e\x92\xaf\x81\xfc\xf9\x0e\x41\x10\x62\x85\x85\x78\x66\x5f\x19\x53\xdc\x4b\x2a\x60\xf1\xe4\x89\xa8\x17\x5f\xe6\xe6\x1e\x17\x2f\x9d\x11\xdc\xef\x51\xde\x9a\x13\xbc\x0d\xae\x23\x4d\xae\x3a\x3a\xdf\xd2\x98\xb6\x69\xee\x11\x7c\xab\xff\x72\x56\xbb\xfb\xd5\x3c\x43\xfc\x71\xaf\x46\x3d\xfa\x14\xe1\x58\x47\x56\x07\xf7\x33\x8f\x22\x99\x1a\x71\x25\x4e\x26\xe2\xba\xbb\xff\x0a\xbf\x95\x65\x9c\x88\x90\xe1\xde\x2c\xcc\x5c\xd0\x95\x95\x6f\x45\x58\x9d\x5d\xb5\x70\x12\x7b\x31\x02\x20\x72\xec\x6b\xba\x7f\x97\x06\xb9\x29\x6a\xe2\xa8\x5f\xf8\xda\x5a\xff\xa6\x50\x68\xbe\xae\x03\xef\x67\x85\x2f\x69\x4d\x71\xa2\x85\x25\x73\xf6\xcb\x9a\xc2\x83\x78\xe0\x48\x25\x21\x46\x6f\xcd\x0e\x3a\xf2\xe5\x9a\x11\xe5\xf8\x39\x9e\x3f\x08\x8d\xc7\xb3\x67\xac\x01\x22\xb7\x19\xc3\xd0\x82\x9e\xff\x10\xe1\xdf\x48\x3d\x7e\x47\xfd\x10\x83\xad\x6d\x4f\x3f\xa3\xfd\x57\x17\xdc\xbb\x7b\x1f\xb6\xea\xee\x6c\xca\xb8\x86\xcb\x9c\x14\xdf\x15\xdb\xe7\x44\x1e\x7f\xdd\xb0\x3b\x38\xe3\xd8\x38\x2c\x37\xf3\x75\xbe\x05\x2f\x78\x52\x0d\xbf\x76\x79\xb8\x35\x16\xc7\xdf\x9f\x9c\xec\x3d\x9c\xb7\x74\x0e\x62\x1c\xee\x4a\xec\xff\x32\x45\x41\xaa\x3f\x4c\xf1\xf7\x4e\xc6\x79\xfd\x2f\x6e\x1b\xc4\xf3\x9f\x01\x00\x00\xff\xff\x49\x2a\x1a\x29\x05\x16\x00\x00")

func instanceListenerMainGoBytes() ([]byte, error) {
	return bindataRead(
		_instanceListenerMainGo,
		"instance-listener/main.go",
	)
}

func instanceListenerMainGo() (*asset, error) {
	bytes, err := instanceListenerMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "instance-listener/main.go", size: 5637, mode: os.FileMode(420), modTime: time.Unix(1463123322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"instance-listener/main.go": instanceListenerMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"instance-listener": &bintree{nil, map[string]*bintree{
		"main.go": &bintree{instanceListenerMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

