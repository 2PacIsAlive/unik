// Code generated by go-bindata.
// sources:
// instance-listener/main.go
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _instanceListenerMainGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdd\x73\xdb\xc6\x11\x7f\x16\xff\x8a\x0b\x66\xe2\x01\x6c\x06\x54\x5b\x4d\xda\xd2\xd1\x83\x12\xd9\x09\x67\x2c\x9b\x95\xec\xc9\x83\xea\x2a\x27\xe0\x28\xa2\x06\xef\x60\xdc\x81\x32\xc7\xe5\xff\xde\xdf\xee\xe1\x93\x1f\x6e\xa6\x9d\x74\xa2\x07\x81\xb8\xdd\xdb\xdb\xef\xfb\x2d\x0a\x99\x7c\x90\x0f\x4a\xac\x64\xa6\x47\xa3\xc9\xe4\xed\x9b\xcb\x37\x53\xbc\x7d\x50\xc2\x56\xa5\x12\xce\x08\x99\x3f\xca\x8d\x15\xf7\x99\x26\x66\xe1\x96\x99\x15\x8b\x2c\x67\x1a\x16\x53\xe9\xe4\x24\xd3\xd6\x49\x9d\xa8\xbb\x3c\xb3\x4e\x69\x55\xde\xd1\xb2\x30\x5a\x94\x2a\x31\xab\x02\xec\x10\x2e\xd3\x54\x48\x2f\xdc\xc9\xf2\x41\xb9\xd1\x28\x5b\x15\xa6\x74\x22\x1c\x9d\x04\x4a\x27\x26\xcd\xf4\xc3\xe4\x9f\xd6\xe8\x80\x16\xca\xd2\x94\x96\x7e\x2d\x56\x8e\x1e\x99\x99\x64\xa6\x72\x59\x4e\x2f\x5a\xb9\xfa\x31\x59\x3a\x57\xd0\x6f\xeb\x4a\xec\xe7\x1d\x76\xa3\x13\x7a\xba\x6c\xa5\xe8\x99\x9b\x87\x60\x14\x8d\x46\x89\x81\xa6\x02\xca\x3a\xc5\x36\x9c\x8b\x60\xc2\x16\xb4\x4b\xb1\x3f\x7e\xe4\x36\x85\xf2\x8c\xf8\x5f\x56\x89\x13\x9f\x47\x27\x57\x32\x99\x15\x57\xb2\x10\xb0\xa2\xb8\xf5\xe7\xbd\xf7\x0f\xd1\xfb\xfb\x85\x64\x4c\x83\x59\x61\x83\x5f\x78\xd3\x0b\xbd\xa6\x5d\xbd\x4d\xfb\xfb\xeb\x4d\x60\xa5\x5d\xdb\xd1\x68\x51\xe9\x84\x03\x13\x46\x74\x76\x46\x07\xbf\x32\x08\xc1\xf4\x5c\x90\x7d\xf1\xf5\xcf\x57\x95\x53\x9f\x3e\x6f\x47\x27\x8a\x0f\x38\x46\xb5\x72\xad\x06\xb4\x96\xb2\x96\xa5\xb0\xde\x4c\xb0\xc5\xad\x7d\xe7\x1c\xa6\x70\x4f\xcb\xa8\xe6\xaa\x0d\xda\x67\x3b\xb0\x63\x74\x42\x1e\x1e\x0b\xc4\x93\x14\xf0\x21\x8c\xaf\x95\x4c\x5f\xc2\xdf\x61\xeb\x79\xc8\xce\x16\xcc\xf5\xd5\xb9\xd0\x59\x4e\x46\x9f\x20\x70\xf1\x1c\x72\xdc\x22\x0c\x12\x53\xe5\xa9\xd0\xc6\x21\xab\x64\xda\x45\x71\x0c\x2d\x36\xf7\xca\xa7\x26\x67\x67\x89\x20\xdf\x1b\xe3\xa6\x22\x78\x06\x81\xf1\x0b\x4a\xa5\x30\xc2\x09\x5b\xa1\x72\xab\x58\x74\x7d\x18\x54\x22\xcf\xc7\xef\xf4\x4a\x96\x76\x29\xf3\xd0\xab\xfb\xc4\x46\xcf\x77\xb5\x19\xa8\xb3\x90\x38\x3b\xa5\x32\x28\xb0\xb1\x49\x16\x8e\xe2\xde\xb1\x27\xf0\x35\x42\x7a\xd2\xd4\xc7\xac\x68\xfd\x81\x3a\x40\x6c\x64\x3e\x2b\xc2\xa3\x1e\x78\x09\x8d\xf2\xc1\x91\xd8\x25\x72\xda\x26\xb2\x62\x2a\xbe\x5e\x07\x2c\x2f\xaa\x4f\xe9\x69\x79\x83\x52\x73\x94\x5f\x95\xce\x3e\x88\x34\xb3\x89\x59\xab\x72\x23\xc2\x2a\x2d\xc4\x52\x81\x78\xaf\x24\xbc\x55\x1a\x99\x26\xd2\xba\x48\x3c\x66\x6e\x09\xa9\xe2\x6b\x0b\xa1\x9d\xc2\xf1\x0d\xc7\x93\xcd\xc9\xf4\xc2\x90\xee\xb7\xef\xef\x37\x4e\x85\x01\xc9\x9e\x06\xe2\xd9\x11\xf6\x6e\xf5\x4a\x5a\xce\xc2\x1e\xdf\xa5\x5a\xc8\x2a\x77\x44\x21\x07\x7c\x7f\xfd\xe6\xe2\xf2\x87\x8b\x9b\xb7\x77\xb3\xf9\xfa\x8c\x78\x4b\x05\x85\xad\x62\x86\xbe\xff\x86\x52\xbd\xef\x76\x4e\x3a\x3f\xec\xc6\x86\xeb\x1b\xef\xbb\xe7\xa2\xb7\xf0\xcd\x0a\x1b\xfd\x6a\x97\x6f\xf0\x73\x52\xe5\x14\xde\xd6\x4f\x02\xdd\xac\x54\x76\xe8\xa3\x03\x4a\x51\xf9\xa1\xf4\x94\x6b\x03\x8e\x96\x15\x5f\x66\x32\x7f\x77\x39\x87\xe7\xd2\xe2\x0c\x22\xa0\x25\x32\x8e\x28\x58\xbd\x80\x64\x52\x79\x36\x9f\xa2\x99\x0c\x1d\x32\xc6\xfa\x1c\x2d\x73\x2a\xfe\xfa\x97\x3f\x7f\x8b\xb7\xed\x7f\x4a\x1a\x34\xcf\xf8\xa6\xa8\xb3\xa1\x55\xbf\x35\xbd\x4b\xa9\x14\x3a\x09\xca\x8a\xce\x46\xb4\x4b\xad\x12\x97\xa1\x23\x8e\x77\x14\x89\xbc\x6d\x0f\x46\x50\x9f\xf2\x2d\xea\x64\x61\x4a\x5f\x27\x77\xde\x5a\xb4\x1b\xb6\x3d\xfe\xb9\xcc\x90\x27\x94\x36\x54\x0c\x07\x14\x1e\x06\xe8\xa8\x9a\x8f\x90\x43\xc9\x4c\x77\x4f\xab\x25\xe9\xec\xcf\xd9\x29\xbc\x3d\x9d\xe9\xa0\xed\x6e\x1d\xb7\x82\x20\x38\x8e\xe3\x80\xb9\xe8\xe2\x88\x6f\x72\xa5\x8a\xf0\x8f\xa7\xa7\xa7\xe2\xa9\xe0\x95\xab\x2c\x47\x84\x71\xa7\xe9\xb4\xa9\x6a\x4a\xda\x15\xc5\x95\xae\xa1\xf8\xb5\x7a\xbc\x51\xe5\x5a\x5d\x55\x9f\x98\x10\xff\x24\x75\x8a\x2e\x17\x4c\x4a\xf5\x40\xb9\x51\xc2\x93\xec\x31\x24\x8f\xdf\x72\xad\x6c\x81\x6b\x49\xb1\x8f\xca\x31\xf2\xfd\xa3\x78\x5a\x53\x3e\x56\x8a\x4a\xb2\x6e\x57\xa0\xc4\x57\xca\x2d\x4d\x4a\xae\x63\x16\xff\x3a\x37\xd6\x79\x37\x42\xaa\x77\xf6\x4f\x68\x91\xaa\x0c\x99\x09\x3d\xc0\x55\xf6\xb5\x71\x2f\x4d\xe5\x15\x07\x9f\xab\x4a\x4d\x26\x08\xfc\xb3\x45\x9e\x39\x4a\x3b\xbe\x21\xfc\x35\x8a\xa4\xc1\x62\x48\x67\x5e\xab\x95\x71\x8a\xe8\x63\x11\x4c\xd9\x41\x54\x6b\x4a\x87\xed\xc6\x48\x7c\x27\xfe\xb0\xdf\x23\x87\xbb\x29\x94\xe3\x5e\x59\xf9\xbe\x59\x32\x9d\xeb\x49\x60\x97\x41\xef\x99\x30\x2a\x00\x72\x00\xc0\x90\x75\xfa\x0d\x45\xed\x18\x41\x1a\xd5\x18\x64\x56\xb0\x11\x8d\x62\xb7\xa7\xef\x41\x5c\xc9\xe4\xc2\xd7\xab\xef\x28\x1f\xe3\x77\xd7\xaf\xe2\xbf\x55\xe8\x84\x61\x14\xff\xa8\x5c\x18\x80\xe5\xae\xa9\xe9\x68\xe7\xe6\x99\xd5\xb2\x45\x13\x44\x95\xee\xf1\xb4\x7d\xb8\x53\xe4\x28\x4b\xa7\x0e\xb1\x4c\x26\x78\x6f\xfa\x09\x6a\xc6\x2d\x55\x2b\x44\x64\x29\x7e\x8b\xb5\x2d\x96\x38\x75\xb2\xbe\x37\x9f\xb0\x63\x58\x75\x1d\x34\x88\xe9\x5f\xc8\xbe\x49\xd5\x42\xc1\x9f\x2d\xe5\x9d\xce\x5b\x5a\x77\xd1\xdf\x76\x9a\xbc\xc7\xc9\x9d\xea\xc4\x86\x53\x08\x39\x84\x76\x2c\x1a\x04\xc1\x49\xcf\x42\x3a\xc4\x11\x5f\xb7\xa7\xfa\x43\xfb\xa4\xde\xb1\x58\x1e\x0b\xe3\x41\x48\x87\x21\xfa\x1a\xf8\xbc\xfa\x0a\x3c\x6c\x16\x36\x7c\x09\x88\x0c\x7d\x0b\x31\x07\x9d\x3b\x60\x82\xc4\x9a\xa9\xa7\xc1\x1e\x97\x36\x64\x82\xb0\xb8\x62\xa9\xa1\x35\x4e\xa1\x14\x2c\xf2\x0d\xb5\x1f\xbe\x22\xd5\xaa\x70\x1b\xc2\x74\x41\xdd\x0a\x86\x38\x87\x41\xc5\x55\x0d\x29\x20\x2f\x1a\x1d\xec\x7b\x87\x01\x4e\x0d\x45\x58\x0f\x54\xc4\x11\x50\x31\x2c\x80\x61\xdd\x51\x4f\x49\x5b\x5d\x49\xb3\xa9\xbf\xd1\xe9\x27\x6d\xa6\x7b\xe1\x65\x7d\x2f\x80\x1d\x95\xdd\x27\x6f\x87\xcd\x0b\xbe\xb8\x6b\x41\x3e\x94\xfa\xbd\x35\xb1\xff\xae\xc4\x8f\xe1\xd2\x8b\x3c\xe7\xbe\xf7\xbd\x49\x37\x47\xc2\xf6\x05\x15\x67\x1a\x1e\xd0\x32\xe7\x7b\xa0\xe4\x70\x45\x83\x2d\x61\x0d\x9b\xfa\xd1\xdc\xb7\xc7\xd7\x52\xa3\x46\xfc\x43\x6e\xac\xe2\x3a\x22\xcc\x4e\x79\xb1\x57\x13\xbf\x02\xd3\x52\x1e\xee\xa3\xda\xdf\xde\x98\x7e\x6e\xbe\x38\x50\x5b\x7b\xdd\xf4\x58\x39\x1f\xae\xe6\xba\xbc\x7a\x8d\xe7\x78\x4b\xea\x75\xa4\x23\x6d\x08\x4d\x07\xfc\xa3\xa3\x0d\xf0\x0b\xee\xba\x48\x12\x55\x38\x95\xee\x57\x50\x63\xa9\xfd\x2d\x4a\x07\xd9\xfd\x3f\x54\x4e\x77\x49\xec\x76\xf2\x1e\xa5\xe7\xb6\xe3\x6d\xae\xbb\x58\xfe\x8f\x65\xb3\xed\x87\x24\xec\xf5\xaf\x7e\xae\x78\x5c\x4e\xfd\xd0\x68\xc1\xe8\xe2\x4f\x80\x75\x94\x76\xac\xc2\x2b\x26\x5f\xe8\x94\x4f\x0f\x83\x29\x53\x91\x7c\x51\x3b\x89\xf7\xe7\x34\x11\x12\x54\x9f\xcd\xd9\x0b\xd0\x93\xe7\xf3\x85\x4c\xa8\x8d\xf6\x50\x3e\x9b\xc4\xcb\x87\x47\x3b\x1f\x05\xcf\x3a\xff\xbc\xad\xa5\x59\x02\x91\xd4\xc2\x51\xd4\x6a\x4d\x2a\x83\xe1\xd1\x94\x1f\x08\x1d\xd5\xf2\x68\xd6\xda\x19\x6c\x47\x8c\xbe\x01\xbc\x59\x11\xee\x81\x52\x3f\x28\xff\x6a\xf7\x86\xe9\x05\xe5\x82\x90\xba\x13\x4a\xb5\xf4\x77\x42\x5a\xbc\x83\x3c\x4b\xbd\xb2\xb3\x88\x97\x63\x2a\x12\x36\xe7\x50\x78\x81\x8b\x81\xa2\x2b\x55\x47\xa5\x56\x48\xd6\xc0\xd2\xeb\xc3\x42\xf7\xef\x3e\xd4\x47\x41\xa3\x06\xcc\xad\x5b\x74\x5d\xdb\xb2\x41\x7b\x16\x37\x59\xb2\x14\x6b\x12\x45\x8b\x71\x48\xdf\x68\x6a\x08\x04\xfc\xae\xc4\x53\xef\xc9\xd7\x18\x04\x78\xa4\x20\x30\xb1\xc6\x42\x3c\xb3\xaf\x8c\x29\xee\x25\x25\xb0\x78\xf2\x44\xd4\x8b\x3f\xe6\xe6\x1e\x73\x98\xce\x08\xfd\xf7\x28\x6f\xcd\x19\xde\x06\xd3\x49\x13\xab\x8e\xce\x43\x1b\xd3\xb6\xcd\x58\xc1\x43\xfe\x97\xa3\xda\x8d\x5b\x8b\x0c\xfe\xc7\x98\x8d\x7c\xf4\x21\xc2\x05\x8f\xa8\x0e\xc6\x35\x8f\x27\x99\x1a\x71\x26\x4e\x26\xe2\xba\x1b\x87\x85\x3f\xca\x32\x62\x84\xcb\x30\x46\x0b\xb3\x10\x34\xc1\xf2\x90\x84\xd5\xd9\xbc\x05\x96\x38\x8b\xb1\x00\x91\x63\x9f\xd3\xfd\xd1\x1a\xe4\x26\xa9\x89\xa3\x7e\xe1\x29\xb6\xfe\x4d\xae\xd0\x3c\xbd\x03\xf9\x67\x85\x4f\x69\x4d\x7e\xa2\x85\x15\x73\xf6\xd3\x9a\xdc\x03\x7f\xe0\x5e\xa5\x4d\x8c\xe3\x9a\x13\x74\xe4\xd3\x35\x23\xca\xe9\x73\x3c\xbf\x13\x1a\x8f\x67\xcf\x58\x02\xb6\xdc\x66\x0c\x48\x0b\x7a\xfe\x4b\x84\xff\x20\xf1\xf8\x1d\xf5\x5d\x0c\xb6\xb6\x3c\x7d\xa3\xf6\x1f\x61\x30\x86\xf7\xbe\x73\xd5\xd5\xd9\xa4\x71\x0d\x9c\x39\x28\xbe\x2a\x76\x2f\x8b\x3c\xfe\x75\xcd\xee\x68\x8f\x63\xe5\xb0\xdc\xf4\xd7\xc5\x0e\xc6\xe0\x4e\x35\xfc\xf8\xe5\x81\xd7\x58\x9c\x7e\x7b\x76\x76\xf0\x86\xde\x91\x39\xf0\x71\xb8\xbf\xe3\xf0\x87\x2a\x72\x52\xfd\x9d\x8a\x3f\x7f\x32\xe2\xeb\x7f\x80\xdb\xc2\x9f\xff\x0e\x00\x00\xff\xff\x22\xbd\xe5\x26\x14\x16\x00\x00")

func instanceListenerMainGoBytes() ([]byte, error) {
	return bindataRead(
		_instanceListenerMainGo,
		"instance-listener/main.go",
	)
}

func instanceListenerMainGo() (*asset, error) {
	bytes, err := instanceListenerMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "instance-listener/main.go", size: 5652, mode: os.FileMode(420), modTime: time.Unix(1463093375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"instance-listener/main.go": instanceListenerMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"instance-listener": &bintree{nil, map[string]*bintree{
		"main.go": &bintree{instanceListenerMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

