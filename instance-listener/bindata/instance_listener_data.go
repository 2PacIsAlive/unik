// Code generated by go-bindata.
// sources:
// instance-listener/main.go
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _instanceListenerMainGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x5b\x73\xdb\x36\x16\x7e\xb6\x7e\x05\xca\x99\x66\xa8\x58\xa1\xdc\xd9\x4c\x77\x57\xa9\x1f\xdc\x3a\x49\x35\x13\xc7\x5a\x39\x99\x3e\x38\x59\x17\x26\x21\x9b\x1b\x8a\x60\x08\x50\x8e\x27\xeb\xff\xbe\xdf\x39\x00\x6f\xa2\xe4\x76\xf6\x36\xf5\x83\x45\x02\xe7\x7e\xc3\x07\x16\x32\xfe\x24\x6f\x94\x58\xcb\x34\x1f\x8d\xa6\xd3\x77\xe7\xa7\xe7\x33\xbc\x7d\x52\xc2\x54\xa5\x12\x56\x0b\x99\xdd\xc9\x7b\x23\xae\xd3\x9c\x88\x85\xbd\x4d\x8d\x58\xa5\x19\xef\x61\x31\x91\x56\x4e\xd3\xdc\x58\x99\xc7\xea\x2a\x4b\x8d\x55\xb9\x2a\xaf\x68\x59\xe8\x5c\x94\x2a\xd6\xeb\x02\xe4\x10\x2e\x93\x44\x48\x27\xdc\xca\xf2\x46\xd9\xd1\x28\x5d\x17\xba\xb4\x22\x1c\x1d\x04\x2a\x8f\x75\x92\xe6\x37\xd3\x7f\x18\x9d\x07\xb4\x50\x96\xba\x34\xf4\xb4\x5a\x5b\xfa\x49\xf5\x34\xd5\x95\x4d\x33\x7a\xc9\x95\xf5\x3f\xd3\x5b\x6b\x0b\x7a\x36\xb6\x04\x3f\x73\x98\xfb\x3c\xa6\xdf\x4c\xdf\xd0\x8f\x4d\xd7\x8a\x05\x65\x92\xdf\x35\x88\xc6\xa3\x51\xac\x61\xb7\x80\xe9\x56\xb1\x47\xc7\x22\x98\xb2\x3f\xcd\x52\xe4\x8c\x19\xd9\xfb\x42\x39\x42\xfc\x2f\xab\xd8\x8a\xaf\xa3\x83\x33\x19\xcf\x8b\x33\x59\x08\xf8\x54\x5c\x3a\xed\x1f\xdd\x8f\xe8\xfc\xfd\x4a\x32\x66\xc1\xbc\x30\xc1\xaf\xcc\xf4\x32\xdf\x10\x57\x87\x69\xc8\xef\x99\x40\x4a\x5c\x0f\xa3\xd1\xaa\xca\x63\x4e\x53\x38\x26\xdd\x88\x9f\x11\xb3\x63\xa1\x4d\x74\x82\xc7\xd1\xc1\x4a\x97\x22\x9d\x08\xac\xd3\x72\x29\x73\x64\x95\x89\x40\x7c\x80\x30\x44\x0b\xc8\xb5\xab\x30\x20\x8a\x6f\x37\x33\xf1\xad\x09\x26\x9e\x63\x3c\x3a\x78\x18\x1d\x90\xe7\x8b\x12\x6e\x7f\x21\x09\x14\xaa\xe8\x82\x8d\x09\x83\x82\x97\x41\x1f\x54\x79\xfa\xe9\x8a\x1e\xdc\x92\x20\xb5\x9c\x6b\xa3\x72\x2b\x36\xa9\x14\x55\x52\x88\x90\xad\x49\xb0\x94\xae\xd2\x58\xda\x14\x95\x50\x54\x65\xa1\x8d\x32\x01\xb4\xb1\xf0\x85\x2c\x8d\x0a\xf1\x96\xae\xc4\xd3\x8e\xf2\xe3\xe3\x5a\xcd\xc0\xf6\x97\xcb\xe5\xf9\x12\xf5\x59\x21\x6d\x45\xa9\x37\x50\x21\x9e\x79\xe3\x20\xe8\xa0\x54\xb6\x2a\x73\xf6\x66\x87\xd0\xbd\xf2\xbc\x08\x11\xcb\x3c\xd7\x56\x5c\x2b\xf1\x21\xf8\x10\x0c\x24\x52\xae\xdf\x68\xf4\x00\xc2\x43\x05\x16\x2d\x7f\x39\xab\xac\xfa\xf2\x15\x9b\x8a\x73\xba\x6f\xd7\xc8\x8d\xea\xed\x35\x3b\x1b\x59\x0a\xe3\x2a\x0b\x64\x51\x53\x52\xc7\xdc\x27\xe1\xa0\x30\xc6\x9e\xca\xd7\xd0\x90\x6c\x07\x87\x4b\xed\x44\xa0\xa1\xc8\x00\xd7\x43\xd1\x52\xc9\xe4\x15\x4a\x3c\x6c\x8a\xdd\xa5\x82\xa8\xbe\x39\x16\x79\x9a\x0d\xc2\x15\xeb\x2a\x4b\x04\x85\xa8\x04\x73\xdb\x38\x13\x58\x71\x8f\xa8\xf1\x6c\xe0\xf1\x50\x22\x41\xd7\x5a\xdb\x99\x08\x0e\x21\x30\x7a\x49\xbd\x1c\x8e\xa9\xd0\x84\xca\x8c\x62\xd1\x5e\x19\x4c\xa2\x62\x8f\xde\xe7\x6b\x54\xc4\xad\xcc\x42\x67\xee\x13\x33\x7e\xb1\x6d\x4d\xcf\x9c\x95\x84\xee\x84\xe6\x50\x41\xa5\xe4\xfb\x93\x1b\x67\xa0\x96\x12\x88\x2e\x3a\xa8\x07\xd4\xbc\x68\xe2\x81\x41\x84\xdc\xc8\x6c\x5e\x84\xbf\x19\x01\x5f\x30\xad\x66\x30\x8b\x8c\xb8\x45\x5a\xa0\xa7\x36\x01\x8b\xed\x57\xce\xa8\x27\xe2\x02\xb3\xcf\x52\x8b\x53\x8d\x8b\x24\x35\xb1\xde\xa8\xf2\x5e\x84\xd4\x38\xb7\x0a\x9b\xd7\x4a\x22\x7a\xa5\x96\x49\x2c\x8d\x1d\x8b\xbb\xd4\xde\x42\xbc\xeb\xd8\xd6\x81\xba\x3b\xc9\xbd\x34\x5f\x69\xf2\xe5\xf2\xe3\xf5\xbd\x55\x61\xb7\xf2\x0f\x83\x59\x70\xb8\x87\xad\x5d\x3d\x93\x86\xab\xb3\x43\x77\xaa\x56\xb2\xca\x2c\xed\x50\x60\x7e\x5c\x9e\x9f\x9c\xfe\x74\x72\xf1\xee\x6a\xbe\xd8\x3c\xe7\x21\xa3\x60\xb8\x51\x4c\xd0\x8d\x6b\x5f\xaa\x8b\xe9\x96\xa6\xe3\x47\xc3\x5b\x13\x3f\x73\x31\x7d\xd1\x5d\x78\xb6\x06\xbf\x5b\x6d\xcb\x11\xf1\x8f\xab\x8c\xb2\xdf\x84\x4d\xe0\xb4\x29\x95\xe9\x87\x6c\x87\x6d\xdd\x0e\x37\x68\x51\x65\x9b\xc2\xc0\xd9\x12\x9d\xa6\x32\x7b\x7f\xba\x08\x03\x64\xe7\x39\x64\xc1\x6a\x54\x26\xed\x60\xf5\x04\x2a\xc8\x85\xf9\x62\x86\x39\xdf\x0f\xd0\x04\xeb\x0b\x9c\x6d\x33\xf1\xd7\xbf\xfc\xf9\x7b\xbc\x3d\xfc\x56\x71\xe1\x94\x8b\x2e\x8a\x7e\x24\x1a\x77\x9a\x50\xb4\xa5\x97\xc0\x34\x9e\xb6\xad\xcf\x38\xd0\x72\x15\xd3\xb8\x85\xa9\x7d\x7b\xc6\x5b\xbe\xde\x68\x41\x47\x8a\x3b\x4d\xf8\xf4\xe0\xfe\xba\x72\xde\x63\x4c\x71\x2c\xa2\x5f\xca\x14\xf5\x44\xe5\x45\xfc\x3b\x1c\xd8\x99\xc0\xbd\x66\xdf\x41\x1c\xd5\x3e\x61\x87\xc6\x6a\xf2\xc1\xa9\xdb\xea\xdb\x81\x0f\xac\xaf\x76\x82\x7b\xba\xaf\xbe\x91\x09\x1d\x51\x14\xf1\x04\x3f\xa0\xc3\x3f\xba\xc8\x94\x2a\xc2\xef\x8e\x8e\x8e\xc4\x53\xc1\x2b\x67\x69\x86\x62\x00\x3c\xc9\x93\x7a\x3e\x50\x99\xaf\x29\xf3\x84\x28\xa2\xb7\xea\xee\x42\x95\x1b\x75\x56\x7d\xe1\x8d\xe8\x67\x99\x27\x99\x7a\x45\x51\x0b\xa6\xa5\xba\xa1\x52\x2a\x11\x68\x8e\x23\x6a\xcd\xb1\x2d\x95\x29\x80\x2b\x14\x47\xae\x9c\xa0\x4b\x3e\x8b\xa7\x7e\xe7\x73\xa5\xa8\xa1\xfd\xf0\xc3\x4e\x74\xa6\xec\xad\x4e\x28\xa0\xc1\xe2\xfc\xe2\x9d\x3b\xa2\xe0\xa2\x71\x91\xff\x19\x73\x56\x95\x21\xb3\x63\x70\xd8\xca\xbc\xd5\xf6\x95\xae\x9c\xcd\x6d\x28\x1e\x04\xfe\x99\x22\x4b\x2d\xd5\x24\x1f\x33\x0e\x0c\xa1\xa2\xb0\x18\x92\xaa\xa5\x5a\x6b\xab\x68\x1f\xc7\xf7\x8c\x63\x43\x8d\xa9\xf2\xb0\x61\x1c\x8b\x1f\xc4\x77\xc3\x41\xdb\xe7\xa6\x84\x4e\x3a\xcd\xe7\x86\x6f\xc9\xfb\xdc\x75\x02\x5c\x1a\x03\x6b\xca\xd8\x0e\xf8\x0f\x30\x51\xfa\xa2\xec\x8b\xda\x72\x82\x2c\xf2\x48\x72\x5e\xb0\x13\xb5\x61\x97\x47\x1f\xb1\xb9\x96\xf1\x89\xeb\x6a\x37\x7e\x3e\x47\xef\x97\x6f\xa2\xbf\x55\x18\x9f\xe1\x38\x7a\xad\x6c\x18\x80\xe4\xaa\xee\xfc\xf1\xd6\x74\x99\x7b\xd9\xa2\xce\x9d\x4a\x06\x34\xcd\x14\x6f\x0d\xd9\x4b\xd2\x9a\x43\x24\xd3\x29\xde\xeb\xa9\x83\x06\xb2\xb7\xaa\x11\x02\x2c\x84\x67\xb1\x31\xc5\x2d\xb4\x4e\x37\xd7\xfa\x0b\x38\xfa\x2d\xd8\xe2\x8b\x88\xfe\x85\x1c\x9b\x44\xad\x14\xe2\xd9\xec\xbc\xcf\xb3\x66\xaf\x45\x0b\x97\xad\x25\x1f\xa1\xb9\x35\x9d\xc8\xa0\x85\xe0\x47\x68\x26\xa2\x86\x21\x5c\xef\x2c\xa4\x85\x2d\xd1\xb2\xd1\xea\x94\x76\xb7\x3a\x6a\xb1\x3c\x11\xda\x21\x99\x16\x88\x74\x2d\x70\x75\xf5\x0d\x68\xd8\x2d\x30\x3c\x86\x66\xfa\xb1\x85\x98\x9d\xc1\xed\x11\x41\xa2\x27\xea\x58\x30\xa0\xca\x35\xb9\x00\x5c\x6a\x19\xa4\xd6\x41\xa1\x12\x2c\xb2\x7b\x1a\x42\x7c\xae\xaa\x75\x61\xef\x09\x8b\x07\x7e\x0a\xf4\xc1\x12\x23\x93\x33\x8f\x4b\x20\x6f\x3c\xda\x39\x04\x77\xa3\x24\x8f\x67\xd8\x0e\x74\xc4\x1e\x64\xd2\x6f\x80\x7e\xdf\xd1\x28\x49\x1a\x5b\xc9\x32\x0f\xdc\xe9\x91\x98\xe9\xd0\x78\xe5\x0f\x0d\x90\xa3\xb3\xbb\xdb\x0f\xc3\xb9\x85\x78\x5c\x35\xd7\x35\x18\xf6\x07\x99\x5f\xff\x5e\x77\xef\xc3\xb5\x27\x59\xc6\x23\xef\x47\x9d\xdc\xef\xc9\xd8\x23\x26\xce\x73\x38\x9e\xcb\x8c\xa7\x7f\xc9\x99\x1a\xf7\x58\x42\x0f\xb3\xba\x89\x1c\xfa\xe3\xda\xa8\x36\x23\xfa\x29\xd3\xee\xba\xc3\x98\x9f\x4a\x62\xd0\x0e\xbf\x03\x13\x53\x09\x0e\x51\xf1\xff\xde\x99\xde\x21\xbf\xa3\xad\x06\x83\x74\x5f\x27\xef\x6e\x64\xdf\x59\x9d\x99\xb3\x7f\x1a\x75\x86\xd1\x9e\x09\x84\x79\x03\xfa\xd1\xde\xd9\xf7\x48\xb8\x4e\xe2\x58\x15\x56\x25\xbb\x9b\xa7\xf6\xd6\xfc\xf7\xba\xe6\xf5\xcb\xff\xa8\x69\xda\xa3\x61\x7b\x7e\x77\x76\x3a\x11\xdb\x3f\xdc\xda\xe3\xe4\xff\xd8\x31\x0f\xdd\x6c\x84\x9d\xa9\xd5\x2d\x13\x87\xd9\x69\x0a\xd2\x67\x04\xc2\x14\x7f\x02\x8e\xa3\x8a\x63\x13\xde\xf0\xf6\x49\x9e\xb0\xf6\x30\x98\xf1\x2e\xea\x6e\xdc\x7c\x37\xe9\x5e\xf1\x44\x48\xe8\x7d\xbe\xe0\x28\xc0\x4e\x72\x2e\x5d\xc9\x98\x86\x67\x07\xf8\xb3\x4b\xbc\xbc\xfb\x56\xe8\xb2\xe0\x48\x17\x5f\x1f\xbc\x34\x43\xa8\x91\x06\x37\xfa\x59\x6d\xc8\x64\x10\xdc\xe9\xf2\x13\x61\x22\x2f\x2f\x10\x87\x62\xeb\x4e\xec\x3e\xdf\x00\x7b\xb3\x21\xed\x07\x1c\x67\xd7\xe0\x9a\xb4\xa2\x5a\x10\x32\x6f\x85\x52\x1b\x7d\x20\x7c\xc5\x1c\x14\x59\x1a\x93\xad\x47\xbc\x1c\x51\x7f\xb0\x3b\xbb\xd2\x0b\x20\x0c\xd8\x5c\x29\x9f\x15\x6f\x90\xf4\x70\xd2\x7f\x50\x22\x01\xc3\x13\x0f\x6d\x51\xd0\xb5\x03\xee\xfa\xe9\xec\xdb\x5a\xd6\x18\xcf\xe0\xfc\x8a\x6f\xc5\x86\x44\xd1\x62\x14\xd2\x17\x35\x0f\x7c\x00\xd8\x95\x78\xea\x22\xf9\x16\x97\x00\x46\xf9\x04\x21\x36\x58\x88\xe6\xe6\x8d\xd6\xc5\xb5\xa4\x02\x16\x4f\x9e\x08\xbf\xf8\x3a\xd3\xd7\xb8\x9a\xe5\x29\xc1\xfd\xce\xce\x3b\xfd\x1c\x6f\xbd\x0b\x4a\x9d\xab\x76\x9f\xef\x71\xbc\xf7\x50\xdf\x23\xf8\xfb\xc0\xe3\x59\x6d\xaf\x5e\xab\x14\xf1\xc7\x8d\x1c\xf5\xe8\x52\x84\x63\x1d\x59\xed\xdd\xe0\x1c\x8a\xe4\xdd\x31\x57\xe2\x74\x2a\x96\xed\x8d\x59\x38\x55\x86\x71\x22\x42\x86\x9b\xb6\xd0\x2b\x41\xb7\x5b\xbe\x20\x61\x75\xbe\x68\xe0\x24\x74\x31\x02\xa0\xed\xc8\xd5\x74\xf7\xf6\x8d\xed\xba\xa8\x89\xc2\xbf\xf0\x0d\xd7\x3f\x53\x28\x72\xbe\xe0\x03\xef\xa7\x85\x2b\xe9\x9c\xe2\x44\x0b\x6b\xa6\xec\x96\x35\x85\x07\xf1\xc0\x91\x4a\x4c\x8c\xde\x6a\x0d\xf9\xd8\x7f\x6d\xa4\x9d\xa3\x17\xf8\xfd\x41\xe4\xf8\x39\x3c\x64\x09\x60\xb9\x4c\x19\x86\x16\xf4\xfb\x4f\x11\xfe\x9d\xc4\xe3\x79\xdc\x0d\x31\xc8\x9a\xf6\x74\x33\xda\x7d\xbf\xc1\x15\xbd\xf3\x89\xcc\x77\x67\x5d\xc6\x1e\x2e\x73\x52\x5c\x57\x6c\x9f\x13\x59\xf4\xfb\x86\xdd\xde\x19\xc7\xc6\x61\xb9\x9e\xaf\xab\x2d\x78\xc1\x93\xaa\xff\xdd\xcc\xc1\xad\x89\x38\xfa\xfe\xf9\xf3\x9d\x87\xf3\x96\xcc\x5e\x8c\xc3\x21\xc7\xee\x6f\x5c\x14\x24\xff\x89\x8b\x3f\x56\x33\xce\xeb\x7e\xbb\x7b\x40\x3c\xff\x15\x00\x00\xff\xff\xa3\x27\x7e\xcb\xd0\x17\x00\x00")

func instanceListenerMainGoBytes() ([]byte, error) {
	return bindataRead(
		_instanceListenerMainGo,
		"instance-listener/main.go",
	)
}

func instanceListenerMainGo() (*asset, error) {
	bytes, err := instanceListenerMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "instance-listener/main.go", size: 6096, mode: os.FileMode(420), modTime: time.Unix(1463326161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"instance-listener/main.go": instanceListenerMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"instance-listener": &bintree{nil, map[string]*bintree{
		"main.go": &bintree{instanceListenerMainGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

